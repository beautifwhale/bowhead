rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {    
  	
    function isSignedIn(req) {
      return req.auth != null;
    }

    // BOWHEAD RULES START
    match /users/{userId} {
			allow read, write: if isSignedIn(request) && request.auth.uid == userId;
    }

    match /stripe/{stripeCustomerId} {
			allow read, write: if isSignedIn(request) && (resource == null || request.auth.uid == resource.data.uid); 
    }
    // BOWHEAD RULES END

    // TEST-APP RULES START
    function getRole(rsc, req) {
      return rsc.data.members[req.auth.uid].role;
    }

    function isOneOfRoles(rsc, req, array) {
      return getRole(rsc, req) in array;
    }

    function getStripeCustomerId(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.stripeCustomerId;
    } 

    function getStripeData(uid) {
      return get(/databases/$(database)/documents/stripe/$(getStripeCustomerId(uid))).data
    }

    function isUserSubscribed(uid) {
      return getStripeData(uid).status == 'trialing' || getStripeData(uid).status == 'active';
    }

    match /userWorkspaces/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /workspaces/{workspaceId} {
 
      allow create: if isSignedIn(request) &&
                        resource == null && // resource does not already exist
                        isOneOfRoles(request.resource, request, ['owner']) && // incoming resource has member 'owner'
                        isUserSubscribed(request.auth.uid); 
      
      allow read: if isSignedIn(request) && (isOneOfRoles(resource, request, ['owner', 'member']) || resource == null)
      
      allow update: if isSignedIn(request) && (isOneOfRoles(resource, request, ['owner']) ||
                          // allow users to update if invite 'pending'
                          resource.data.invites[request.auth.token['email']] in ['pending'] ||
                          // allow users to remove themselves from the members list
                          (isOneOfRoles(resource, request, ['member']) &&
                           (request.auth.uid in request.resource.data.members.keys()) == false))
      
      allow delete: if isSignedIn(request) && isOneOfRoles(resource, request, ['owner']);
    }

    // TEST-APP RULES END
  }
}